#!/usr/bin/env python3

# TODO:
# Unit testing with pytest!
# Implement a way to edit movie titles and types
# Implement a way to back the database up into a text file or something
# Implement better column flag functionality (e.g., '-ac' or '-lc')
# Implement genres (e.g., action, comedy, drama, etc.)
# Clean up code and add comments

# Imports
import argparse as arse  # CLI arg parsing
import os  # Environment variables
import sqlite3 as sqlite  # SQLite API
import traceback  # Stack trace
from enum import Enum  # Enumerated types
from itertools import zip_longest  # Zip lists of different lengths
from pathlib import Path  # Path manipulation
from random import choice  # Random selection
from colorama import Back, Fore, init  # Colored output

# Initialize colorama
init(autoreset=True)


# Types of movies
class MovieType(Enum):
    FILM = "film"
    SHOW = "show"


# OS specific connection string with pathlib
if os.name == "nt":  # Windows
    db_dir = Path(Path.home(), "AppData", "Local")
else:  # Linux
    db_dir = Path(Path.home(), ".config")

# Construct the full path to the SQLite database file
conn_str = Path(db_dir, "movie-py.db")


try:  # Try to do the thing
    # Establish connection to SQLite DB located in home directory
    with sqlite.connect(conn_str) as db_conn:
        # Initialize cursor
        cursor = db_conn.cursor()

        # Create the movies table if it doesn't exist
        cursor.execute(
            """create table if not exists movies (
            id integer primary key autoincrement,
            title text not null,
            type text not null)"""
        )

        # Check for valid input type
        def valid(movie_type=None):
            if movie_type:
                return movie_type.title() in [
                    MovieType.FILM.value.title(),
                    MovieType.SHOW.value.title(),
                ]
            else:
                return True

        # Fetch movie titles
        def fetch(movie_type=None):
            if movie_type:  # Arg
                cursor.execute(
                    "select title from movies where type=? order by title asc",
                    (movie_type,),
                )
            else:  # No arg
                cursor.execute("select title from movies order by title")

            # Get the title column results and store them in a list
            return [
                movie[0] for movie in cursor.fetchall()
            ]  # Return the list of movies

        # Fetch with title and type
        def fetch_with_type(movie_type=None):
            if movie_type:
                cursor.execute(
                    "select title, type from movies where type=? "
                    + "order by title asc",
                    (movie_type,),
                )
            else:
                cursor.execute("select title, type from movies order by title")

            # Get the results and store them in a list
            return cursor.fetchall()

        # Insert a new movie, if the same movie is not already in the database
        def insert(title, type):
            if type.title() in [ # Check if type is valid
                MovieType.FILM.value.title(),
                MovieType.SHOW.value.title(),
            ] and title not in fetch():  # Check if title is already in the database
                cursor.execute(
                    "insert into movies (title, type) values (?, ?)",
                    (title, type),
                )
                db_conn.commit()
                return True
            else:
                if title in fetch():
                    print(
                        f"{Fore.LIGHTWHITE_EX}{Back.BLUE}The movie "
                        f"{Fore.LIGHTYELLOW_EX}'{title}'"
                        f"{Fore.LIGHTWHITE_EX} is already in the database!"
                    )
                return False

        # Remove a movie
        def remove(title):
            # Check if title exists
            cursor.execute(
                "select exists(select 1 from movies where title=?)", (title,)
            )
            exists = cursor.fetchone()[0]
            if not exists:
                print(
                    f"{Fore.LIGHTWHITE_EX}{Back.BLUE}The movie "
                    f"{Fore.LIGHTYELLOW_EX}'{title}'"
                    f"{Fore.LIGHTWHITE_EX} is not in the database!"
                )
                return False

            # Remove the movie
            cursor.execute("delete from movies where title=?", (title,))
            db_conn.commit()
            return True

        # Confirm an insertion or deletion
        def confirm(act, title, type=None):
            if act == "insert":
                confirm = (
                    input(
                        f"{Fore.LIGHTMAGENTA_EX}Insert {type.lower()}"
                        f" '{title}'?  ('y' to confirm): "
                    )
                    .lower()
                    .strip()
                )
                return confirm == "y" or confirm == "yes" or confirm == "oui"
            elif act == "remove":
                confirm = (
                    input(
                        f"{Fore.LIGHTMAGENTA_EX}Remove '{title}'?"
                        f"  ('y' to confirm): "
                    )
                    .lower()
                    .strip()
                )
                return confirm == "y" or confirm == "yes" or confirm == "oui"

        # List all titles in column format
        def list_col():
            film = fetch(MovieType.FILM.value.title())  # Fetch films
            show = fetch(MovieType.SHOW.value.title())  # Fetch shows

            if film or show:
                # Calculate the width of each column
                max_title_len_film = (
                    max(len(title) for title in film) if film else 0
                )
                max_title_len_show = (
                    max(len(title) for title in show) if show else 0
                )

                # Determine the total width for each header
                total_width = max(max_title_len_film, max_title_len_show)

                # Center the headers over their respective lists
                films_header = (
                    f"{Fore.BLACK}{Back.LIGHTRED_EX}"
                    f'{"-- Films --":^{total_width}}'
                )
                shows_header = (
                    f" {Fore.BLACK}{Back.LIGHTCYAN_EX}"
                    f'{"-- Shows --":^{total_width}}'
                )

                # Print the headers
                print("\n" + films_header, shows_header)

                # Print the movies and shows
                for f, s in zip_longest(film, show, fillvalue=""):
                    print(
                        f"{Fore.LIGHTRED_EX}{f:^{total_width}}"
                        f"  {Fore.LIGHTCYAN_EX}{s:^{total_width}}"
                    )
                print()

            else:
                print(f"{Fore.LIGHTWHITE_EX}{Back.BLUE}No movies found!")

        # List all titles
        def list_all():
            film = fetch(MovieType.FILM.value.title())
            show = fetch(MovieType.SHOW.value.title())

            if film or show:
                print(f"{Fore.BLACK}{Back.LIGHTRED_EX}-- Films --")
                if film:
                    print(Fore.LIGHTRED_EX + "\n".join(film))
                else:
                    print(f"{Fore.LIGHTWHITE_EX}{Back.BLUE}No films found!")

                print(f"{Fore.BLACK}\n{Back.LIGHTCYAN_EX}-- Shows --")
                if show:
                    print(Fore.LIGHTCYAN_EX + "\n".join(show))
                else:
                    print(f"{Fore.LIGHTWHITE_EX}{Back.BLUE}No shows found!")
            else:
                print(f"{Fore.LIGHTWHITE_EX}{Back.BLUE}No movies found!")

        # List specified titles
        def list_movies(movie_type):
            movies = fetch(movie_type.title())  # Fetch movies

            fg = (Fore.LIGHTYELLOW_EX
                  if movie_type.title() == "Film"
                  else Fore.LIGHTMAGENTA_EX
                  )

            if movies:
                print(fg + "\n".join(movies))
            else:
                print(f"{Fore.LIGHTWHITE_EX}{Back.BLUE}No movies found!")

        # View the number of movies
        def amount(movie_type=None):
            if movie_type == "film" or movie_type == "show":
                cursor.execute(
                    "select type, count(*) from movies where type=? "
                    + "group by type",
                    (movie_type.title(),),
                )  # Select from specified type
            elif movie_type == "all":
                cursor.execute(
                    "select type, count(*) from movies group by type"
                )  # Select from all types

            # Get the results and store them in a list
            results = cursor.fetchall()

            # Print the results
            for result in results:
                # Background colour
                bg = (
                    Back.LIGHTRED_EX
                    if result[0] == "Film"
                    else Back.LIGHTCYAN_EX
                )
                # Foreground colour
                fg_1 = Fore.BLACK
                fg_2 = (
                    Fore.LIGHTRED_EX
                    if result[0] == "Film"
                    else Fore.LIGHTCYAN_EX
                )
                print(f"{bg}{fg_1}{result[0]}s:", end="")
                print(f" {fg_2}{result[1]}")

        # Recommend a movie
        def recommend(movie_type=None):
            if movie_type:  # If a type is specified
                movies = fetch_with_type(movie_type.title())
            else:  # If no type is specified
                movies = fetch_with_type()

            recomm = (
                list(choice(movies)) if movies else None
            )  # Randomly select a movie from the list (if it exists)

            fg = Fore.BLACK  # Foreground color
            bg = (
                Back.LIGHTRED_EX if recomm[1] == "Film" else Back.LIGHTCYAN_EX
            )  # Background color

            if movies:  # Print the selection
                print(f"{Fore.LIGHTWHITE_EX}{Back.MAGENTA}You should watch...")
                print(f"\t--> {fg}{bg}{recomm[0]}")
            else:  # Null return
                print(
                    f"{Fore.LIGHTWHITE_EX}{Back.BLUE}"
                    f"No movies found for recommendation!"
                )

        def main():
            arser = arse.ArgumentParser(
                description="Random movie/show recommendation!"
            )  # Arg parser
            # Type of movie arg
            arser.add_argument(
                "-t",
                "--type",
                nargs="?",
                choices=["film", "show"],
                metavar="[film|show]",
                help="Specify the type of movie to pick (film or show)",
            )
            # List movies arg
            arser.add_argument(
                "-l",
                "--list",
                choices=["all", "films", "shows"],
                const="all",
                nargs="?",
                metavar="[all|films|shows]",
                help="List "
                + "movies available "
                + "for selection (all, films, or shows), "
                + "for copy/paste situations",
            )
            # Column list arg
            arser.add_argument(
                "-c",
                "--columns",
                action="store_true",
                help="List all movies in column format, for aesthetic output",
            )
            # Insert movies arg
            arser.add_argument(
                "-i",
                "--insert",
                nargs=2,
                metavar=("<title>", "<type>"),
                help="Insert "
                + "a new movie or show "
                + "into the database (title and type)",
            )
            # Remove movie arg
            arser.add_argument(
                "-r",
                "--remove",
                nargs="+",
                metavar="<title>",
                help="Remove a movie by title(s)",
            )
            # View amount of movies arg
            arser.add_argument(
                "-a",
                "--amount",
                choices=["films", "shows", "all"],
                const="all",
                nargs="?",
                metavar="[films|shows|all]",
                help="View "
                + "the number of movies available "
                + "in the database (films, shows, or all)",
            )

            args = arser.parse_args()  # Do the thing

            if args.remove:  # Removing
                for title in args.remove:
                    if confirm("remove", title) and remove(title):
                        print(
                            f"{Fore.LIGHTWHITE_EX}{Back.GREEN}"
                            f"'{title}' removed successfully!"
                        )
                    else:
                        print(
                            f"{Fore.LIGHTMAGENTA_EX}{Back.GREEN}"
                            f"Removal of '{title}' cancelled!"
                        )

            elif args.insert:  # Inserting
                title, type = args.insert
                type = type.title()  # Convert to title case
                if valid(type):
                    if confirm("insert", title, type) and insert(title, type):
                        print(
                            f"{Fore.LIGHTWHITE_EX}{Back.GREEN}"
                            f"Inserted {type.lower()} '{title}' successfully!"
                        )
                    else:
                        print(
                            f"{Fore.LIGHTMAGENTA_EX}{Back.GREEN}"
                            f"Insertion of {type.lower()} '{title}' cancelled!"
                        )
                else:
                    print(
                        f"{Fore.LIGHTWHITE_EX}{Back.BLUE}"
                        f"Invalid type '{type.title()}'!  "
                        f"Please specify either 'film' or 'show'."
                    )

            elif args.list:  # Listing
                if args.list == "films":  # Films
                    list_movies(MovieType.FILM.value)
                elif args.list == "shows":  # Shows
                    list_movies(MovieType.SHOW.value)
                else:  # All
                    list_all()

            elif args.columns:  # Columns
                list_col()

            elif args.amount:  # Amounts'
                if args.amount == "films":  # Films
                    amount(MovieType.FILM.value)
                elif args.amount == "shows":  # Shows
                    amount(MovieType.SHOW.value)
                else:  # All
                    amount(args.amount)

            elif args.type:  # Choosing
                recommend(args.type)

            else:
                recommend()

    # 'Modularization' or something
    if __name__ == "__main__":
        main()


except sqlite.Error as e:  # SQLite connection error
    print(f"SQLite connection error: {e}")
except Exception as e:  # Other error
    print(f"Error: {e}")
    traceback.print_exc()
